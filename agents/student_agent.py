# Student agent: Add your own agent here
from agents.agent import Agent
from store import register_agent
import sys
from world import World, PLAYER_1_NAME, PLAYER_2_NAME

@register_agent("student_agent")
class StudentAgent(Agent):
    """
    A dummy class for your implementation. Feel free to use this class to
    add any helper functionalities needed for your agent.
    """

    def __init__(self):
        super(StudentAgent, self).__init__()
        self.name = "StudentAgent"
        self.dir_map = {
            "u": 0,
            "r": 1,
            "d": 2,
            "l": 3,
        }

    def step(self, chess_board, my_pos, adv_pos, max_step):
        """
        Implement the step function of your agent here.
        You can use the following variables to access the chess board:
        - chess_board: a numpy array of shape (x_max, y_max, 4)
        - my_pos: a tuple of (x, y)
        - adv_pos: a tuple of (x, y)
        - max_step: an integer

        You should return a tuple of ((x, y), dir),
        where (x, y) is the next position of your agent and dir is the direction of the wall
        you want to put on.

        Please check the sample implementation in agents/random_agent.py or agents/human_agent.py for more details.
        """
        
        #generate all simulations
        while time + space resources are left:
            #store all the paths into this array
            listOfPath = []
            #returns a path
            Path = stimulChild(chess_board, my_pos, adv_pos)
            listOfPath.append(Path)

        #find number of each direct action 
        nodeUCT = 
            
        # dummy return
        return my_pos, self.dir_map["u"]



    
    
    #start from the current chessboard
    def stimulChild(chess_board, my_pose, adv_pos):

        
        #a path that is found by 1 simulation counsisting of ((my_pos, dir), [number of success, number of visit])
        path = []
        
        
        

    #if get the first round, run simulations until resources are used up
        
    #An array of paths generated by simulations, paths is a list of tuples where (node,  a list of 2 numbers(number of visited + number of success)).

    #for each simulation, backpropagate values of nodes(visited times, number of success)

    #calculate UCTs for the direct children and find the best one

    #expand the node by returning this child
